name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  STAGING_LEASH_IMAGE: ghcr.io/strongdm/leash-verify
  STAGING_TARGET_IMAGE: ghcr.io/strongdm/coder-verify

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  verify:
    name: Verify
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      packages: write
    outputs:
      docker_version: ${{ steps.push_images.outputs.sanitized_version }}
    steps:
      - name: Configure AWS credentials (ECR public preflight)
        if: github.event_name == 'push'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ECR_RELEASE_ROLE_ARN }}
          aws-region: us-east-1
      - name: Login to ECR Public (preflight)
        if: github.event_name == 'push'
        run: aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.3'
      - name: Install LSM prerequisites
        run: sudo apt-get update && sudo apt-get install -y --no-install-recommends clang llvm libbpf-dev pkg-config nodejs npm
      - name: Install pnpm
        run: |
          sudo npm install -g pnpm@10
          pnpm --version
      - name: Generate LSM artifacts
        run: make lsm-generate
      - name: Build UI
        run: make build-ui
      - name: Build binaries
        run: make build
      - name: Run test suite
        run: make test-go && make test-web
      - name: Upload build artifacts for release
        uses: actions/upload-artifact@v4
        with:
          name: verify-build-assets
          if-no-files-found: error
          path: |
            internal/lsm
            internal/ui/dist
            bin
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push staging Docker images
        id: push_images
        env:
          LEASH_IMAGE: ${{ env.STAGING_LEASH_IMAGE }}
          TARGET_IMAGE: ${{ env.STAGING_TARGET_IMAGE }}
        run: ./build/publish-docker.sh "verify-${{ github.run_id }}"

  release:
    name: Build & Publish
    needs: verify
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.release_version.outputs.tag }}
      version: ${{ steps.release_version.outputs.version }}
    permissions:
      id-token: write
      contents: write
      packages: write
      actions: read
    env:
      GORELEASER_CURRENT_TAG: ${{ github.ref_name }}
      AWS_REGION: us-west-1
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.2'
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ECR_RELEASE_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to ECR Public
        run: aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Download verify artifacts
        uses: actions/download-artifact@v4
        with:
          name: verify-build-assets
          path: .
      - name: Install release prerequisites
        run: sudo apt-get update && sudo apt-get install -y --no-install-recommends clang llvm libbpf-dev pkg-config
      - name: Set up Goreleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          version: v2.12.5
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload Goreleaser dist
        uses: actions/upload-artifact@v4
        with:
          name: goreleaser-dist
          if-no-files-found: error
          path: dist
      - name: Compute release version
        id: release_version
        run: |
          TAG="${GORELEASER_CURRENT_TAG}"
          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"
          echo "version=${TAG#v}" >> "$GITHUB_OUTPUT"
      - name: Promote Docker images
        env:
          LEASH_SOURCE_IMAGE: ${{ env.STAGING_LEASH_IMAGE }}:${{ needs.verify.outputs.docker_version }}
          TARGET_SOURCE_IMAGE: ${{ env.STAGING_TARGET_IMAGE }}:${{ needs.verify.outputs.docker_version }}
          ECR_LEASH_IMAGE: public.ecr.aws/s5i7k8t3/strongdm/leash
          ECR_TARGET_IMAGE: public.ecr.aws/s5i7k8t3/strongdm/coder
        run: ./build/publish-docker.sh "${GORELEASER_CURRENT_TAG}"

  stage-npm:
    name: Stage npm Package
    needs:
      - release
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      packages: read
    env:
      NPM_VERSION: ${{ needs.release.outputs.version }}
    outputs:
      tarball: ${{ steps.build_npm.outputs.tarball }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download Goreleaser dist artifacts
        uses: actions/download-artifact@v4
        with:
          name: goreleaser-dist
          path: dist
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> "$GITHUB_PATH"
          uv --version
      - name: Install Ruff toolchain
        run: |
          uv tool install ruff
          uv tool run ruff --version
      - name: Lint npm tooling
        run: |
          uv run ruff check build/npm
          uv run ruff format --check build/npm
      - name: Collect vendor assets
        run: |
          uv run build/npm/collect_vendor_from_dist.py --dist dist --out dist/npm/vendor --force
      - name: Build npm package
        id: build_npm
        run: |
          uv run build/npm/build_npm_package.py \
            --version "${{ env.NPM_VERSION }}" \
            --vendor dist/npm/vendor \
            --stage dist/npm/stage \
            --out dist/npm \
            --force
          echo "tarball=dist/npm/strongdm-leash-${{ env.NPM_VERSION }}.tgz" >> "$GITHUB_OUTPUT"
      - name: Upload npm package artifact
        uses: actions/upload-artifact@v4
        with:
          name: npm-package
          if-no-files-found: error
          path: ${{ steps.build_npm.outputs.tarball }}

  publish-npm:
    name: Publish npm Package
    needs:
      - release
      - stage-npm
    if: ${{ github.ref_type == 'tag' }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      packages: write
    env:
      NPM_VERSION: ${{ needs.release.outputs.version }}
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    steps:
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: https://registry.npmjs.org
      - name: Download npm package artifact
        uses: actions/download-artifact@v4
        with:
          name: npm-package
          path: dist/npm
      - name: Determine npm dist-tag
        id: npm_tag
        run: |
          VERSION="${{ env.NPM_VERSION }}"
          if [[ "$VERSION" == *"-alpha."* ]]; then
            echo "tag=alpha" >> "$GITHUB_OUTPUT"
          else
            echo "tag=latest" >> "$GITHUB_OUTPUT"
          fi
      - name: Publish to npm
        env:
          NPM_CONFIG_PROVENANCE: "true"
        run: |
          npm publish "${{ needs.stage-npm.outputs.tarball }}" --provenance --access public --tag "${{ steps.npm_tag.outputs.tag }}"
