package log2cedar

import (
	"strings"
	"testing"
)

func TestParseKeyValuePairs(t *testing.T) {
	line := "time=2025-10-07T18:03:19Z event=http.request protocol=https addr=\"bf2e.com\" path=\"/\" decision=denied status=403 error=\"connection denied by security policy\""
	fields, ok := parseKeyValuePairs(line)
	if !ok {
		t.Fatalf("expected parse to succeed")
	}

	cases := map[string]string{
		"event":    "http.request",
		"protocol": "https",
		"addr":     "bf2e.com",
		"path":     "/",
		"decision": "denied",
		"status":   "403",
		"error":    "connection denied by security policy",
	}

	for key, want := range cases {
		if got := fields[key]; got != want {
			t.Fatalf("field %s: want %q, got %q", key, want, got)
		}
	}
}

func TestGeneratorRender(t *testing.T) {
	log := strings.Join([]string{
		"time=2025-10-07T18:02:40Z event=http.request protocol=https addr=\"bf2e.com\" path=\"/\" decision=denied status=403 error=\"connection denied by security policy\"",
		"time=2025-10-07T18:02:56Z event=http.request protocol=https addr=\"www.facebook.com\" path=\"/\" decision=denied status=403 error=\"connection denied by security policy\"",
		"time=2025-10-07T18:20:36Z event=proc.exec pid=273173 cgroup=17412 exe=\"bash\" path=\"/usr/bin/date\" argc=1 argv=\"/usr/bin/date\" decision=denied",
	}, "\n")

	gen := NewGenerator(false)
	if err := gen.Ingest(strings.NewReader(log)); err != nil {
		t.Fatalf("unexpected ingest error: %v", err)
	}

	got := gen.Render()
	want := `// Generated by log2cedar. Review before applying.

permit(
    principal,
    action == Action::"NetworkConnect",
    resource
)
when {
    resource in [
        Host::"bf2e.com",
        Host::"www.facebook.com"
    ]
};

permit(
    principal,
    action == Action::"ProcessExec",
    resource == File::"/usr/bin/date"
);
`

	if got != want {
		t.Fatalf("unexpected output:\nwant:\n%s\ngot:\n%s", want, got)
	}
}

func TestGeneratorRenderAllowedMode(t *testing.T) {
	log := strings.Join([]string{
		"time=2025-10-07T18:02:40Z event=http.request protocol=https addr=\"bf2e.com\" path=\"/\" decision=allowed status=200",
		"time=2025-10-07T18:02:56Z event=http.request protocol=https addr=\"www.facebook.com\" path=\"/\" decision=allowed status=200",
	}, "\n")

	gen := NewGenerator(true)
	if err := gen.Ingest(strings.NewReader(log)); err != nil {
		t.Fatalf("unexpected ingest error: %v", err)
	}

	got := gen.Render()
	want := `// Generated by log2cedar. Review before applying.

forbid(
    principal,
    action == Action::"NetworkConnect",
    resource
)
when {
    resource in [
        Host::"bf2e.com",
        Host::"www.facebook.com"
    ]
};
`

	if got != want {
		t.Fatalf("unexpected output:\nwant:\n%s\ngot:\n%s", want, got)
	}
}

func TestFirstNonEmpty(t *testing.T) {
	if got := firstNonEmpty("", "curl -fsS http://example.com", "/usr/bin/date"); got != "/usr/bin/date" {
		t.Fatalf("expected /usr/bin/date, got %q", got)
	}

	if got := firstNonEmpty("curl -fsS http://example.com"); got != "" {
		t.Fatalf("expected empty string, got %q", got)
	}
}
